<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.ReservationMapper">

    <select id="selectAll" resultType="com.example.entity.Reservation">
        select reservation.*, 
               employee.name as userName, 
               doctor.name as doctorName 
        from `reservation`
        left join employee on reservation.employee_id = employee.id
        left join doctor on reservation.doctor_id = doctor.id
        left join department on employee.department_id = department.id
        <where>
            <if test="status != null and status != ''"> and reservation.status = #{status}</if>
            <if test="userId != null"> and reservation.employee_id = #{userId}</if>
            <if test="doctorId != null"> and reservation.doctor_id = #{doctorId}</if>
            <if test="userName != null and userName != ''"> and employee.name like concat('%', #{userName}, '%')</if>
            <if test="startDate != null and startDate != ''"> and reservation.time &gt;= concat(#{startDate}, ' 00:00:00')</if>
            <if test="endDate != null and endDate != ''"> and reservation.time &lt;= concat(#{endDate}, ' 23:59:59')</if>
            <if test="companyId != null">
                and (
                    doctor.company_id = #{companyId}
                    or department.company_id = #{companyId}
                )
            </if>
        </where>
        order by reservation.id desc
    </select>

    <delete id="deleteById">
        delete from `reservation`
        where id = #{id}
    </delete>

    <insert id="insert" parameterType="com.example.entity.Reservation" useGeneratedKeys="true">
        insert into `reservation`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="userId != null">employee_id,</if>
            <if test="doctorId != null">doctor_id,</if>
            <if test="start != null">start,</if>
            <if test="end != null">end,</if>
            <if test="question != null">question,</if>
            <if test="time != null">time,</if>
            <if test="status != null">status,</if>
            <if test="reason != null">reason,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="userId != null">#{userId},</if>
            <if test="doctorId != null">#{doctorId},</if>
            <if test="start != null">#{start},</if>
            <if test="end != null">#{end},</if>
            <if test="question != null">#{question},</if>
            <if test="time != null">#{time},</if>
            <if test="status != null">#{status},</if>
            <if test="reason != null">#{reason},</if>
        </trim>
    </insert>

    <update id="updateById" parameterType="com.example.entity.Reservation">
        update `reservation`
        <set>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="reason != null">
                reason = #{reason},
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="selectByDoctorIdAndTimeRange" resultType="com.example.entity.Reservation">
        SELECT 
            id,
            employee_id as userId,
            doctor_id as doctorId,
            start,
            end,
            question,
            time,
            status,
            reason
        FROM reservation 
        WHERE doctor_id = #{doctorId} 
        AND (
            (start BETWEEN #{start} AND #{end}) 
            OR (end BETWEEN #{start} AND #{end})
            OR (#{start} BETWEEN start AND end)
            OR (#{end} BETWEEN start AND end)
        )
        ORDER BY start ASC
    </select>

</mapper>